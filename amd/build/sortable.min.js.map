{"version":3,"sources":["../src/sortable.js"],"names":["document","addEventListener","e","up_class","element","target","reClassify","dir","className","replace","getValue","getAttribute","innerText","nodeName","tr","parentNode","table","test","column_index","nodes","cells","i","length","indexOf","org_tbody","tBodies","rows","slice","call","reverse","sort","a","b","x","y","isNaN","localeCompare","clone_tbody","cloneNode","appendChild","splice","replaceChild","error"],"mappings":"AAyCAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmC,SAAUC,CAAV,CAAa,IAExCC,CAAAA,CAAQ,CAAG,SAF6B,CAKxCC,CAAO,CAAGF,CAAC,CAACG,MAL4B,CAO5C,QAASC,CAAAA,CAAT,CAAoBF,CAApB,CAA6BG,CAA7B,CAAkC,CAChCH,CAAO,CAACI,SAAR,CAAoBJ,CAAO,CAACI,SAAR,CAAkBC,OAAlB,CALN,aAKM,CAAqC,EAArC,EAA2CF,CAChE,CAED,QAASG,CAAAA,CAAT,CAAkBN,CAAlB,CAA2B,CAGzB,MAAOA,CAAAA,CAAO,CAACO,YAAR,CAAqB,WAArB,GAAqCP,CAAO,CAACQ,SAErD,CAED,GAAyB,IAArB,GAAAR,CAAO,CAACS,QAAZ,CAA+B,CAC7B,GAAI,IACEC,CAAAA,CAAE,CAAGV,CAAO,CAACW,UADf,CAIEC,CAAK,CAAGF,CAAE,CAACC,UAAH,CAAcA,UAJxB,CAKF,GApBc,cAoBV,CAAYE,IAAZ,CAAiBD,CAAK,CAACR,SAAvB,CAAJ,CAAuC,CAKrC,OAJIU,CAAAA,CAIJ,CAHIC,CAAK,CAAGL,CAAE,CAACM,KAGf,CAASC,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,CAAK,CAACG,MAA1B,CAAkCD,CAAC,EAAnC,CAAuC,CACrC,GAAIF,CAAK,CAACE,CAAD,CAAL,GAAajB,CAAjB,CAA0B,CACxBc,CAAY,CAAGG,CAChB,CAFD,IAEO,CACLf,CAAU,CAACa,CAAK,CAACE,CAAD,CAAN,CAAW,EAAX,CACX,CACF,CAED,GAAId,CAAAA,CAAG,UAAP,CAGA,GAA8C,CAAC,CAA3C,GAAAH,CAAO,CAACI,SAAR,CAAkBe,OAAlB,WAAJ,CAAkD,CAChDhB,CAAG,CAAGJ,CACP,CAEDG,CAAU,CAACF,CAAD,CAAUG,CAAV,CAAV,CApBqC,GAuBjCiB,CAAAA,CAAS,CAAGR,CAAK,CAACS,OAAN,CAAc,CAAd,CAvBqB,CA0BjCC,CAAI,CAAG,GAAGC,KAAH,CAASC,IAAT,CAAcJ,CAAS,CAACE,IAAxB,CAA8B,CAA9B,CA1B0B,CA4BjCG,CAAO,CAAGtB,CAAG,GAAKJ,CA5Be,CA+BrCuB,CAAI,CAACI,IAAL,CAAU,SAAUC,CAAV,CAAaC,CAAb,CAAgB,IACpBC,CAAAA,CAAC,CAAGvB,CAAQ,CAAC,CAACmB,CAAO,CAAGE,CAAH,CAAOC,CAAf,EAAkBZ,KAAlB,CAAwBF,CAAxB,CAAD,CADQ,CAEpBgB,CAAC,CAAGxB,CAAQ,CAAC,CAACmB,CAAO,CAAGG,CAAH,CAAOD,CAAf,EAAkBX,KAAlB,CAAwBF,CAAxB,CAAD,CAFQ,CAKxB,MAAOiB,CAAAA,KAAK,CAACF,CAAC,CAAGC,CAAL,CAAL,CAAeD,CAAC,CAACG,aAAF,CAAgBF,CAAhB,CAAf,CAAoCD,CAAC,CAAGC,CAChD,CAND,EASA,GAAIG,CAAAA,CAAW,CAAGb,CAAS,CAACc,SAAV,EAAlB,CAGA,MAAOZ,CAAI,CAACJ,MAAZ,CAAoB,CAClBe,CAAW,CAACE,WAAZ,CAAwBb,CAAI,CAACc,MAAL,CAAY,CAAZ,CAAe,CAAf,EAAkB,CAAlB,CAAxB,CACD,CAGDxB,CAAK,CAACyB,YAAN,CAAmBJ,CAAnB,CAAgCb,CAAhC,CACD,CACF,CAAC,MAAOkB,CAAP,CAAc,CAEf,CACF,CACF,CA9EH","sourcesContent":["/**\n * sortable 1.0\n *\n * Makes html tables sortable, ie9+\n *\n * Styling is done in css.\n *\n * Copyleft 2017 Jonas Earendel\n *\n * This is free and unencumbered software released into the public domain.\n *\n * Anyone is free to copy, modify, publish, use, compile, sell, or\n * distribute this software, either in source code form or as a compiled\n * binary, for any purpose, commercial or non-commercial, and by any\n * means.\n *\n * In jurisdictions that recognize copyright laws, the author or authors\n * of this software dedicate any and all copyright interest in the\n * software to the public domain. We make this dedication for the benefit\n * of the public at large and to the detriment of our heirs and\n * successors. We intend this dedication to be an overt act of\n * relinquishment in perpetuity of all present and future rights to this\n * software under copyright law.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n *\n * For more information, please refer to <http://unlicense.org>\n *\n */\n\n// sort is super fast, even with huge tables, so that is probably not the issue\n// Not solved with documentFragment, same issue... :(\n// My guess is that it is simply too much to hold in memory, since\n// it freezes even before sortable is called if the table is too big in index.html\n\ndocument.addEventListener('click', function (e) {\n    var down_class = ' dir-d '\n    var up_class = ' dir-u '\n    var regex_dir = / dir-(u|d) /\n    var regex_table = /\\bsortable\\b/\n    var element = e.target\n\n    function reClassify(element, dir) {\n      element.className = element.className.replace(regex_dir, '') + dir\n    }\n\n    function getValue(element) {\n      // If you aren't using data-sort and want to make it just the tiniest bit smaller/faster\n      // comment this line and uncomment the next one\n      return element.getAttribute('data-sort') || element.innerText\n      // return element.innerText\n    }\n\n    if (element.nodeName === 'TH') {\n      try {\n        var tr = element.parentNode\n        // var table = element.offsetParent; // Fails with positioned table elements\n        // this is the only way to make really, really sure. A few more bytes though... ðŸ˜¡\n        var table = tr.parentNode.parentNode\n        if (regex_table.test(table.className)) {\n          var column_index\n          var nodes = tr.cells\n\n          // reset thead cells and get column index\n          for (var i = 0; i < nodes.length; i++) {\n            if (nodes[i] === element) {\n              column_index = i\n            } else {\n              reClassify(nodes[i], '')\n            }\n          }\n\n          var dir = down_class\n\n          // check if we're sorting up or down, and update the css accordingly\n          if (element.className.indexOf(down_class) !== -1) {\n            dir = up_class\n          }\n\n          reClassify(element, dir)\n\n          // extract all table rows, so the sorting can start.\n          var org_tbody = table.tBodies[0]\n\n          // get the array rows in an array, so we can sort them...\n          var rows = [].slice.call(org_tbody.rows, 0)\n\n          var reverse = dir === up_class\n\n          // sort them using custom built in array sort.\n          rows.sort(function (a, b) {\n            var x = getValue((reverse ? a : b).cells[column_index])\n            var y = getValue((reverse ? b : a).cells[column_index])\n            // var y = (reverse ? b : a).cells[column_index].innerText\n            // var x = (reverse ? a : b).cells[column_index].innerText\n            return isNaN(x - y) ? x.localeCompare(y) : x - y\n          })\n\n          // Make a clone without content\n          var clone_tbody = org_tbody.cloneNode()\n\n          // Build a sorted table body and replace the old one.\n          while (rows.length) {\n            clone_tbody.appendChild(rows.splice(0, 1)[0])\n          }\n\n          // And finally insert the end result\n          table.replaceChild(clone_tbody, org_tbody)\n        }\n      } catch (error) {\n        // console.log(error)\n      }\n    }\n  })"],"file":"sortable.min.js"}