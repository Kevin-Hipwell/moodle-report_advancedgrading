{"version":3,"sources":["../../src/sdt/rows.js"],"names":["Rows","dt","rows","row","tr","headings","length","map","forEach","h","i","td","innerHTML","data","appendChild","Array","isArray","push","build","hasRows","update","columns","rebuild","select","sort","a","b","splice","dataIndex","columnIndex","value","findIndex","children","innerText","toLowerCase","includes","index","findRowIndex","cols","cells","r"],"mappings":"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","sourcesContent":["import {createElement} from \"./helpers\"\n/**\n * Rows API\n * @param {Object} instance DataTable instance\n * @param {Array} rows\n */\nexport class Rows {\n    constructor(dt, rows) {\n        this.dt = dt\n        this.rows = rows\n\n        return this\n    }\n\n    /**\n     * Build a new row\n     * @param  {Array} row\n     * @return {HTMLElement}\n     */\n    build(row) {\n        const tr = createElement(\"tr\")\n\n        let headings = this.dt.headings\n\n        if (!headings.length) {\n            headings = row.map(() => \"\")\n        }\n\n        headings.forEach((h, i) => {\n            const td = createElement(\"td\")\n\n            // Fixes #29\n            if (!row[i] || !row[i].length) {\n                row[i] = \"\"\n            }\n\n            td.innerHTML = row[i]\n\n            td.data = row[i]\n\n            tr.appendChild(td)\n        })\n\n        return tr\n    }\n\n    render(row) {\n        return row\n    }\n\n    /**\n     * Add new row\n     * @param {Array} select\n     */\n    add(data) {\n        if (Array.isArray(data)) {\n            const dt = this.dt\n            // Check for multiple rows\n            if (Array.isArray(data[0])) {\n                data.forEach(row => {\n                    dt.data.push(this.build(row))\n                })\n            } else {\n                dt.data.push(this.build(data))\n            }\n\n            // We may have added data to an empty table\n            if ( dt.data.length ) {\n                dt.hasRows = true\n            }\n\n\n            this.update()\n\n            dt.columns().rebuild()\n        }\n\n    }\n\n    /**\n     * Remove row(s)\n     * @param  {Array|Number} select\n     * @return {Void}\n     */\n    remove(select) {\n        const dt = this.dt\n\n        if (Array.isArray(select)) {\n            // Remove in reverse otherwise the indexes will be incorrect\n            select.sort((a, b) => b - a)\n\n            select.forEach(row => {\n                dt.data.splice(row, 1)\n            })\n        } else if (select == \"all\") {\n            dt.data = [];\n        } else {\n            dt.data.splice(select, 1)\n        }\n\n        // We may have emptied the table\n        if ( !dt.data.length ) {\n            dt.hasRows = false\n        }\n\n        this.update()\n        dt.columns().rebuild()\n    }\n\n    /**\n     * Update row indexes\n     * @return {Void}\n     */\n    update() {\n        this.dt.data.forEach((row, i) => {\n            row.dataIndex = i\n        })\n    }\n\n    /**\n     * Find index of row by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Number}\n     */\n    findRowIndex(columnIndex, value) {\n        // returns row index of first case-insensitive string match\n        // inside the td innerText at specific column index\n        return this.dt.data.findIndex(\n            tr => tr.children[columnIndex].innerText.toLowerCase().includes(String(value).toLowerCase())\n        )\n    }\n\n    /**\n     * Find index, row, and column data by searching for a value in a column\n     * @param  {Number} columnIndex\n     * @param  {String} value\n     * @return {Object}\n     */\n    findRow(columnIndex, value) {\n        // get the row index\n        const index = this.findRowIndex(columnIndex, value)\n        // exit if not found\n        if (index < 0) {\n            return {\n                index: -1,\n                row: null,\n                cols: []\n            }\n        }\n        // get the row from data\n        const row = this.dt.data[index]\n        // return innerHTML of each td\n        const cols = [...row.cells].map(r => r.innerHTML)\n        // return everything\n        return {\n            index,\n            row,\n            cols\n        }\n    }\n\n    /**\n     * Update a row with new data\n     * @param  {Number} select\n     * @param  {Array} data\n     * @return {Void}\n     */\n    updateRow(select, data) {\n        const row = this.build(data)\n        this.dt.data.splice(select, 1, row)\n        this.update()\n        this.dt.columns().rebuild()\n    }\n}\n"],"file":"rows.min.js"}